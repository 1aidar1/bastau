// Code generated by sqlc. DO NOT EDIT.
// source: tokens.sql

package postgres

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :one
INSERT INTO tokens
    (hash,user_id,expiry,scope)
    VALUES
    ($1,$2,$3,$4)
    RETURNING hash, user_id, expiry, scope
`

type CreateTokenParams struct {
	Hash   []byte      `json:"hash"`
	UserID int64       `json:"user_id"`
	Expiry time.Time   `json:"expiry"`
	Scope  TokensScope `json:"scope"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) (Token, error) {
	row := q.db.QueryRow(ctx, createToken,
		arg.Hash,
		arg.UserID,
		arg.Expiry,
		arg.Scope,
	)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}

const deleteAllTokensForUser = `-- name: DeleteAllTokensForUser :one
DELETE FROM tokens WHERE user_id = $1 RETURNING hash, user_id, expiry, scope
`

func (q *Queries) DeleteAllTokensForUser(ctx context.Context, userID int64) (Token, error) {
	row := q.db.QueryRow(ctx, deleteAllTokensForUser, userID)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}

const deleteScopeTokenForUser = `-- name: DeleteScopeTokenForUser :one
DELETE FROM tokens
       WHERE user_id = $1
       AND scope = $2
       RETURNING hash, user_id, expiry, scope
`

type DeleteScopeTokenForUserParams struct {
	UserID int64       `json:"user_id"`
	Scope  TokensScope `json:"scope"`
}

func (q *Queries) DeleteScopeTokenForUser(ctx context.Context, arg DeleteScopeTokenForUserParams) (Token, error) {
	row := q.db.QueryRow(ctx, deleteScopeTokenForUser, arg.UserID, arg.Scope)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}
